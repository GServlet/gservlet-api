/**
 *  Licensed to Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with License.  You may obtain a copy of License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See License for the
 *  specific language governing permissions and limitations
 *  under License.
 */

// DSL Descriptor for GServlet API

import org.gservlet.annotation.*


//@org.gservlet.AbstractServlet

contribute(currentType(annos: annotatedBy(Servlet))) {
	property name : 'logger', type : java.util.logging.Logger, provider : 'org.gservlet.AbstractServlet', doc : 'Logger object'
	property name : 'config', type : javax.servlet.ServletConfig, provider : 'org.gservlet.AbstractServlet', doc : 'ServletConfig object'
	property name : 'request', type : javax.servlet.http.HttpServletRequest, provider : 'org.gservlet.AbstractServlet', doc : 'HttpServletRequest object'
	property name : 'response', type : javax.servlet.http.HttpServletResponse, provider : 'org.gservlet.AbstractServlet', doc : 'HttpServletResponse object'
	property name : 'session', type : javax.servlet.http.HttpSession, provider : 'org.gservlet.AbstractServlet', doc : 'HttpSession object'
	property name : 'context', type : javax.servlet.ServletContext, provider : 'org.gservlet.AbstractServlet', doc : 'ServletContext object'
	property name : 'sql', type : groovy.sql.Sql, provider : 'org.gservlet.AbstractServlet', doc : 'Sql object'
	property name : 'out', type : java.io.PrintWriter, provider : 'org.gservlet.AbstractServlet', doc : 'PrintWriter object'
	property name : 'html', type : groovy.xml.MarkupBuilder, provider : 'org.gservlet.AbstractServlet', doc : 'MarkupBuilder object'
	property name : 'xml', type : groovy.xml.MarkupBuilder, provider : 'org.gservlet.AbstractServlet', doc : 'MarkupBuilder object'
}

contribute(currentType(annos: annotatedBy(Servlet))) {
	delegatesTo type : org.gservlet.AbstractServlet, except : [
		'service',
		'doGet',
		'doPost',
		'doHead',
		'doPut',
		'doTrace',
		'doOptions',
		'doDelete'
	]
}

//@org.gservlet.AbstractFilter

contribute(currentType(annos: annotatedBy(Filter))) {
	property name : 'logger', type : java.util.logging.Logger, provider : 'org.gservlet.AbstractFilter', doc : 'Logger object'
	property name : 'config', type : javax.servlet.FilterConfig, provider : 'org.gservlet.AbstractFilter', doc : 'FilterConfig object'
	property name : 'request', type : javax.servlet.http.HttpServletRequest, provider : 'org.gservlet.AbstractFilter', doc : 'HttpServletRequest object'
	property name : 'response', type : javax.servlet.http.HttpServletResponse, provider : 'org.gservlet.AbstractFilter', doc : 'HttpServletResponse object'
	property name : 'chain', type : javax.servlet.FilterChain, provider : 'org.gservlet.AbstractFilter', doc : 'FilterChain object'
	property name : 'session', type : javax.servlet.http.HttpSession, provider : 'org.gservlet.AbstractFilter', doc : 'HttpSession object'
	property name : 'context', type : javax.servlet.ServletContext, provider : 'org.gservlet.AbstractFilter', doc : 'ServletContext object'
	property name : 'sql', type : groovy.sql.Sql, provider : 'org.gservlet.AbstractFilter', doc : 'Sql object'
	property name : 'out', type : java.io.PrintWriter, provider : 'org.gservlet.AbstractFilter', doc : 'PrintWriter object'
	property name : 'html', type : groovy.xml.MarkupBuilder, provider : 'org.gservlet.AbstractFilter', doc : 'MarkupBuilder object'
	property name : 'xml', type : groovy.xml.MarkupBuilder, provider : 'org.gservlet.AbstractFilter', doc : 'MarkupBuilder object'
}

contribute(currentType(annos: annotatedBy(Filter))) {
	delegatesTo type : org.gservlet.AbstractFilter, except : ['init', 'doFilter']
}

//@org.gservlet.AbstractContextListener

contribute(currentType(annos: annotatedBy(ContextListener))) {
	property name : 'logger', type : java.util.logging.Logger, provider : 'org.gservlet.AbstractListener', doc : 'Logger object'
	property name : 'context', type : javax.servlet.ServletContext, provider : 'org.gservlet.AbstractContextListener', doc : 'ServletContext object'
	property name : 'event', type : javax.servlet.ServletContextEvent, provider : 'org.gservlet.AbstractContextListener', doc : 'ServletContext object event'
}

contribute(currentType(annos: annotatedBy(ContextListener))) {
	delegatesTo type : org.gservlet.AbstractContextListener, except : [
		'contextInitialized',
		'contextDestroyed'
	]
}

contribute(currentType(annos: annotatedBy(ContextListener))) {
	delegatesTo type : org.gservlet.AbstractListener
}


//@org.gservlet.AbstractRequestListener

contribute(currentType(annos: annotatedBy(RequestListener))) {
	property name : 'logger', type : java.util.logging.Logger, provider : 'org.gservlet.AbstractListener', doc : 'Logger object'
	property name : 'request', type : javax.servlet.http.HttpServletRequest, provider : 'org.gservlet.AbstractRequestListener', doc : 'HttpServletRequest object'
	property name : 'session', type : javax.servlet.http.HttpSession, provider : 'org.gservlet.AbstractRequestListener', doc : 'HttpSession object'
	property name : 'context', type : javax.servlet.ServletContext, provider : 'org.gservlet.AbstractRequestListener', doc : 'ServletContext object'
	property name : 'event', type : javax.servlet.ServletRequestEvent, provider : 'org.gservlet.AbstractRequestListener', doc : 'ServletRequestEvent object'
}

contribute(currentType(annos: annotatedBy(RequestListener))) {
	delegatesTo type : org.gservlet.AbstractRequestListener, except : [
		'requestInitialized',
		'requestDestroyed'
	]
}

contribute(currentType(annos: annotatedBy(RequestListener))) {
	delegatesTo type : org.gservlet.AbstractListener, except : ['invoke']
}


//@org.gservlet.AbstractSessionListener

contribute(currentType(annos: annotatedBy(SessionListener))) {
	property name : 'logger', type : java.util.logging.Logger, provider : 'org.gservlet.AbstractListener', doc : 'Logger object'
	property name : 'session', type : javax.servlet.http.HttpSession, provider : 'org.gservlet.AbstractSessionListener', doc : 'HttpSession object'
	property name : 'event', type : javax.servlet.http.HttpSessionEvent, provider : 'org.gservlet.AbstractSessionListener', doc : 'HttpSessionEvent object'
}

contribute(currentType(annos: annotatedBy(SessionListener))) {
	delegatesTo type : org.gservlet.AbstractSessionListener, except : [
		'sessionCreated',
		'sessionDestroyed'
	]
}

contribute(currentType(annos: annotatedBy(SessionListener))) {
	delegatesTo type : org.gservlet.AbstractListener, except : ['invoke']
}


//@org.gservlet.AbstractContextAttributeListener

contribute(currentType(annos: annotatedBy(ContextAttributeListener))) {
	property name : 'logger', type : java.util.logging.Logger, provider : 'org.gservlet.AbstractListener', doc : 'Logger object'
	property name : 'context', type : javax.servlet.ServletContext, provider : 'org.gservlet.AbstractContextAttributeListener', doc : 'ServletContext object'
	property name : 'event', type : javax.servlet.ServletContextAttributeEvent, provider : 'org.gservlet.AbstractContextAttributeListener', doc : 'ServletContextAttributeEvent object'
	property name : 'name', type : java.lang.String, provider : 'org.gservlet.AbstractContextAttributeListener', doc : 'attribute name'
	property name : 'value', type : java.lang.Object, provider : 'org.gservlet.AbstractContextAttributeListener', doc : 'attribute value'
}

contribute(currentType(annos: annotatedBy(ContextAttributeListener))) {
	delegatesTo type : org.gservlet.AbstractContextAttributeListener, except : [
		'attributeAdded',
		'attributeRemoved',
		'attributeReplaced'
	]
}

contribute(currentType(annos: annotatedBy(ContextAttributeListener))) {
	delegatesTo type : org.gservlet.AbstractListener, except : ['invoke']
}


//@org.gservlet.AbstractRequestAttributeListener

contribute(currentType(annos: annotatedBy(RequestAttributeListener))) {
	property name : 'logger', type : java.util.logging.Logger, provider : 'org.gservlet.AbstractListener', doc : 'Logger object'
	property name : 'request', type : javax.servlet.http.HttpServletRequest, provider : 'org.gservlet.AbstractRequestAttributeListener', doc : 'HttpServletRequest object'
	property name : 'session', type : javax.servlet.http.HttpSession, provider : 'org.gservlet.AbstractRequestAttributeListener', doc : 'HttpSession object'
	property name : 'context', type : javax.servlet.ServletContext, provider : 'org.gservlet.AbstractRequestAttributeListener', doc : 'ServletContext object'
	property name : 'event', type : javax.servlet.ServletRequestAttributeEvent, provider : 'org.gservlet.AbstractRequestAttributeListener', doc : 'ServletRequestAttributeEvent object'
	property name : 'name', type : java.lang.String, provider : 'org.gservlet.AbstractRequestAttributeListener', doc : 'attribute name'
	property name : 'value', type : java.lang.Object, provider : 'org.gservlet.AbstractRequestAttributeListener', doc : 'attribute value'
}

contribute(currentType(annos: annotatedBy(RequestAttributeListener))) {
	delegatesTo type : org.gservlet.AbstractRequestAttributeListener, except : [
		'attributeAdded',
		'attributeRemoved',
		'attributeReplaced'
	]
}

contribute(currentType(annos: annotatedBy(RequestAttributeListener))) {
	delegatesTo type : org.gservlet.AbstractListener, except : ['invoke']
}


//@org.gservlet.AbstractSessionAttributeListener

contribute(currentType(annos: annotatedBy(SessionAttributeListener))) {
	property name : 'logger', type : java.util.logging.Logger, provider : 'org.gservlet.AbstractListener', doc : 'Logger object'
	property name : 'session', type : javax.servlet.http.HttpSession, provider : 'org.gservlet.AbstractSessionAttributeListener', doc : 'HttpSession object'
	property name : 'event', type : javax.servlet.http.HttpSessionBindingEvent, provider : 'org.gservlet.AbstractSessionAttributeListener', doc : 'HttpSessionBindingEvent object'
	property name : 'name', type : java.lang.String, provider : 'org.gservlet.AbstractSessionAttributeListener', doc : 'attribute name'
	property name : 'value', type : java.lang.Object, provider : 'org.gservlet.AbstractSessionAttributeListener', doc : 'attribute value'
}

contribute(currentType(annos: annotatedBy(SessionAttributeListener))) {
	delegatesTo type : org.gservlet.AbstractSessionAttributeListener, except : [
		'attributeAdded',
		'attributeRemoved',
		'attributeReplaced'
	]
}

contribute(currentType(annos: annotatedBy(SessionAttributeListener))) {
	delegatesTo type : org.gservlet.AbstractListener, except : ['invoke']
}


//@org.gservlet.AbstractSessionActivationListener

contribute(currentType(annos: annotatedBy(SessionActivationListener))) {
	property name : 'logger', type : java.util.logging.Logger, provider : 'org.gservlet.AbstractListener', doc : 'Logger object'
	property name : 'event', type : javax.servlet.http.HttpSessionEvent, provider : 'org.gservlet.AbstractSessionActivationListener', doc : 'HttpSessionEvent object'
	property name : 'session', type : javax.servlet.http.HttpSession, provider : 'org.gservlet.AbstractSessionActivationListener', doc : 'HttpSession object'
}

contribute(currentType(annos: annotatedBy(SessionActivationListener))) {
	delegatesTo type : org.gservlet.AbstractSessionActivationListener, except : [
		'sessionDidActivate',
		'sessionWillPassivate'
	]
}

contribute(currentType(annos: annotatedBy(SessionActivationListener))) {
	delegatesTo type : org.gservlet.AbstractListener, except : ['invoke']
}


//@org.gservlet.AbstractSessionBindingListener

contribute(currentType(annos: annotatedBy(SessionBindingListener))) {
	property name : 'logger', type : java.util.logging.Logger, provider : 'org.gservlet.AbstractListener', doc : 'Logger object'
	property name : 'event', type : javax.servlet.http.HttpSessionBindingEvent, provider : 'org.gservlet.AbstractSessionBindingListener', doc : 'HttpSessionBindingEvent object'
	property name : 'session', type : javax.servlet.http.HttpSession, provider : 'org.gservlet.AbstractSessionBindingListener', doc : 'HttpSession object'
	property name : 'name', type : java.lang.String, provider : 'org.gservlet.AbstractSessionBindingListener', doc : 'attribute name'
	property name : 'value', type : java.lang.Object, provider : 'org.gservlet.AbstractSessionBindingListener', doc : 'attribute value'
}

contribute(currentType(annos: annotatedBy(SessionBindingListener))) {
	delegatesTo type : org.gservlet.AbstractSessionBindingListener, except : [
		'valueBound',
		'valueUnbound'
	]
}

contribute(currentType(annos: annotatedBy(SessionBindingListener))) {
	delegatesTo type : org.gservlet.AbstractListener, except : ['invoke']
}


//@org.gservlet.AbstractSessionIdListener

contribute(currentType(annos: annotatedBy(SessionIdListener))) {
	property name : 'logger', type : java.util.logging.Logger, provider : 'org.gservlet.AbstractListener', doc : 'Logger object'
	property name : 'event', type : javax.servlet.http.HttpSessionEvent, provider : 'org.gservlet.AbstractSessionIdListener', doc : 'HttpSessionEvent object'
	property name : 'session', type : javax.servlet.http.HttpSession, provider : 'org.gservlet.AbstractSessionIdListener', doc : 'HttpSession object'
	property name : 'oldSessionId', type : java.lang.String, provider : 'org.gservlet.AbstractSessionIdListener', doc : 'old session id'
}

contribute(currentType(annos: annotatedBy(SessionIdListener))) {
	delegatesTo type : org.gservlet.AbstractSessionIdListener, except : [
		'sessionIdChanged'
	]
}

contribute(currentType(annos: annotatedBy(SessionIdListener))) {
	delegatesTo type : org.gservlet.AbstractListener, except : ['invoke']
}