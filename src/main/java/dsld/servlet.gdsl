/**
 *  Licensed to Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with License.  You may obtain a copy of License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See License for the
 *  specific language governing permissions and limitations
 *  under License.
 */

// GDSL Descriptor for GServlet API

def classContext = context(scope: classScope())

contributor(classContext) {
  if (hasAnnotation('org.gservlet.annotation.Servlet')) {  
    property name : 'logger', type : 'java.util.logging.Logger', doc : 'Logger object'
	property name : 'config', type : 'jakarta.servlet.ServletConfig', doc : 'ServletConfig object'
	property name : 'request', type : 'jakarta.servlet.http.HttpServletRequest', doc : 'HttpServletRequest object'
	property name : 'response', type : 'jakarta.servlet.http.HttpServletResponse', doc : 'HttpServletResponse object'
	property name : 'session', type : 'jakarta.servlet.http.HttpSession', doc : 'HttpSession object'
	property name : 'context', type : 'jakarta.servlet.ServletContext', doc : 'ServletContext object'
	property name : 'sql', type : 'groovy.sql.Sql', doc : 'Sql object'
	property name : 'out', type : 'java.io.PrintWriter', doc : 'PrintWriter object'
	property name : 'html', type : 'groovy.xml.MarkupBuilder', doc : 'MarkupBuilder object'
	property name : 'xml', type : 'groovy.xml.MarkupBuilder', doc : 'MarkupBuilder object'
	delegatesTo(findClass('org.gservlet.AbstractServlet'))
  }
}
   
contributor(classContext) {
 if (hasAnnotation('org.gservlet.annotation.Filter')) {  
    property name : 'logger', type : 'java.util.logging.Logger', doc : 'Logger object'
	property name : 'config', type : 'jakarta.servlet.FilterConfig', doc : 'FilterConfig object'
	property name : 'request', type : 'jakarta.servlet.http.HttpServletRequest', doc : 'HttpServletRequest object'
	property name : 'response', type : 'jakarta.servlet.http.HttpServletResponse', doc : 'HttpServletResponse object'
	property name : 'chain', type : 'jakarta.servlet.FilterChain', doc : 'FilterChain object'
	property name : 'session', type : 'jakarta.servlet.http.HttpSession', doc : 'HttpSession object'
	property name : 'context', type : 'jakarta.servlet.ServletContext', doc : 'ServletContext object'
	property name : 'sql', type : 'groovy.sql.Sql', doc : 'Sql object'
	property name : 'out', type : 'java.io.PrintWriter', doc : 'PrintWriter object'
	property name : 'html', type : 'groovy.xml.MarkupBuilder', doc : 'MarkupBuilder object'
	property name : 'xml', type : 'groovy.xml.MarkupBuilder', doc : 'MarkupBuilder object'
	delegatesTo(findClass('org.gservlet.AbstractFilter'))
  }
}
  
contributor(classContext) {  
   if (hasAnnotation('org.gservlet.annotation.ContextListener')) {  
    property name : 'logger', type : 'java.util.logging.Logger', doc : 'Logger object'
	property name : 'context', type : 'jakarta.servlet.ServletContext', doc : 'ServletContext object'
	property name : 'event', type : 'jakarta.servlet.ServletContextEvent', doc : 'ServletContext object event'
	delegatesTo(findClass('org.gservlet.AbstractContextListener'))
	delegatesTo(findClass('org.gservlet.AbstractListener'))
  }
}
  
contributor(classContext) {  
  if (hasAnnotation('org.gservlet.annotation.RequestListener')) {  
    property name : 'logger', type : 'java.util.logging.Logger', doc : 'Logger object'
	property name : 'request', type : 'jakarta.servlet.http.HttpServletRequest', doc : 'HttpServletRequest object'
	property name : 'session', type : 'jakarta.servlet.http.HttpSession', doc : 'HttpSession object'
	property name : 'context', type : 'jakarta.servlet.ServletContext', doc : 'ServletContext object'
	property name : 'event', type : 'jakarta.servlet.ServletRequestEvent', doc : 'ServletRequestEvent object'
	delegatesTo(findClass('org.gservlet.AbstractRequestListener'))
	delegatesTo(findClass('org.gservlet.AbstractListener'))
  }
}
  
contributor(classContext) {  
   if (hasAnnotation('org.gservlet.annotation.SessionListener')) {  
    property name : 'logger', type : 'java.util.logging.Logger', doc : 'Logger object'
	property name : 'session', type : 'jakarta.servlet.http.HttpSession', doc : 'HttpSession object'
	property name : 'event', type : 'jakarta.servlet.http.HttpSessionEvent', doc : 'HttpSessionEvent object'
	delegatesTo(findClass('org.gservlet.AbstractSessionListener'))
	delegatesTo(findClass('org.gservlet.AbstractListener'))
  }
}
  
contributor(classContext) {  
   if (hasAnnotation('org.gservlet.annotation.ContextAttributeListener')) {  
    property name : 'logger', type : 'java.util.logging.Logger', doc : 'Logger object'
	property name : 'context', type : 'jakarta.servlet.ServletContext', doc : 'ServletContext object'
	property name : 'event', type : 'jakarta.servlet.ServletContextAttributeEvent', doc : 'ServletContextAttributeEvent object'
	property name : 'name', type : 'java.lang.String', doc : 'attribute name'
	property name : 'value', type : 'java.lang.Object', doc : 'attribute value'
	delegatesTo(findClass('org.gservlet.AbstractContextAttributeListener'))
	delegatesTo(findClass('org.gservlet.AbstractListener'))
  }
}

contributor(classContext) {
  if (hasAnnotation('org.gservlet.annotation.RequestAttributeListener')) {  
    property name : 'logger', type : 'java.util.logging.Logger', doc : 'Logger object'
	property name : 'request', type : 'jakarta.servlet.http.HttpServletRequest', doc : 'HttpServletRequest object'
	property name : 'session', type : 'jakarta.servlet.http.HttpSession', doc : 'HttpSession object'
	property name : 'context', type : 'jakarta.servlet.ServletContext', doc : 'ServletContext object'
	property name : 'event', type : 'jakarta.servlet.ServletRequestAttributeEvent', doc : 'ServletRequestAttributeEvent object'
	property name : 'name', type : 'java.lang.String', doc : 'attribute name'
	property name : 'value', type : 'java.lang.Object', doc : 'attribute value'
	delegatesTo(findClass('org.gservlet.AbstractRequestAttributeListener'))
	delegatesTo(findClass('org.gservlet.AbstractListener'))
  }
}
  
contributor(classContext) {  
   if (hasAnnotation('org.gservlet.annotation.SessionAttributeListener')) {  
    property name : 'logger', type : 'java.util.logging.Logger', doc : 'Logger object'
	property name : 'session', type : 'jakarta.servlet.http.HttpSession', doc : 'HttpSession object'
	property name : 'event', type : 'jakarta.servlet.http.HttpSessionBindingEvent', doc : 'HttpSessionBindingEvent object'
	property name : 'name', type : 'java.lang.String', doc : 'attribute name'
	property name : 'value', type : 'java.lang.Object', doc : 'attribute value'
	delegatesTo(findClass('org.gservlet.AbstractSessionAttributeListener'))
	delegatesTo(findClass('org.gservlet.AbstractListener'))
  }
}
  
contributor(classContext) { 
  if (hasAnnotation('org.gservlet.annotation.SessionActivationListener')) {  
    property name : 'logger', type : 'java.util.logging.Logger', doc : 'Logger object'
	property name : 'event', type : 'jakarta.servlet.http.HttpSessionEvent', doc : 'HttpSessionEvent object'
	property name : 'session', type : 'jakarta.servlet.http.HttpSession', doc : 'HttpSession object'
	delegatesTo(findClass('org.gservlet.AbstractSessionActivationListener'))
	delegatesTo(findClass('org.gservlet.AbstractListener'))
  }
 }
  
 contributor(classContext) { 
   if (hasAnnotation('org.gservlet.annotation.SessionBindingListener')) {  
    property name : 'logger', type : 'java.util.logging.Logger', doc : 'Logger object'
	property name : 'event', type : 'jakarta.servlet.http.HttpSessionBindingEvent', doc : 'HttpSessionBindingEvent object'
	property name : 'session', type : 'jakarta.servlet.http.HttpSession', doc : 'HttpSession object'
	property name : 'name', type : 'java.lang.String', doc : 'attribute name'
	property name : 'value', type : 'java.lang.Object', doc : 'attribute value'
	delegatesTo(findClass('org.gservlet.AbstractSessionBindingListener'))
	delegatesTo(findClass('org.gservlet.AbstractListener'))
   }
 }
  
 contributor(classContext) {
   if (hasAnnotation('org.gservlet.annotation.SessionIdListener')) {  
    property name : 'logger', type : 'java.util.logging.Logger', doc : 'Logger object'
	property name : 'event', type : 'jakarta.servlet.http.HttpSessionEvent', doc : 'HttpSessionEvent object'
	property name : 'session', type : 'jakarta.servlet.http.HttpSession', doc : 'HttpSession object'
	property name : 'oldSessionId', type : 'java.lang.String', doc : 'old session id'
	delegatesTo(findClass('org.gservlet.AbstractSessionIdListener'))
	delegatesTo(findClass('org.gservlet.AbstractListener'))
  }
}